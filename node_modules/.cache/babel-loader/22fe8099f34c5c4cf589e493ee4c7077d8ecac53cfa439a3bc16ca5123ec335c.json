{"ast":null,"code":"import axios from\"axios\";const API_URL=(process.env.REACT_APP_API_BASE_URL||\"http://localhost:5001\")+\"/api/v1\";export const getFavorites=async userId=>{console.log(\"üîç [getFavorites] Getting favorites for user:\",userId);console.log(\"üîç [getFavorites] API URL:\",\"\".concat(API_URL,\"/favorites/\").concat(userId));const res=await axios.get(\"\".concat(API_URL,\"/favorites/\").concat(userId));console.log(\"üîç [getFavorites] Response:\",res.data);return res.data;};export const updateFavorites=async(userId,favorites)=>{const res=await axios.put(\"\".concat(API_URL,\"/favorites\"),{userId:userId,favorites});return res.data;};export const getFavoriteMovies=async userId=>{try{console.log(\"üîç [getFavoriteMovies] Starting for user:\",userId);// First get the user's favorite movie IDs\nconst favoritesData=await getFavorites(userId);const favoriteIds=favoritesData.favorites||[];console.log(\"üîç [getFavoriteMovies] Got favorite IDs:\",favoriteIds);if(favoriteIds.length===0){console.log(\"üîç [getFavoriteMovies] No favorites found\");return[];}// Then get the full movie details for each favorite\nconst moviePromises=favoriteIds.map(async movieId=>{try{console.log(\"üîç [getFavoriteMovies] Fetching movie:\",movieId);const res=await axios.get(\"\".concat(API_URL,\"/movies/id/\").concat(movieId));console.log(\"üîç [getFavoriteMovies] Movie data:\",res.data);return res.data;}catch(error){console.error(\"\\u274C Error fetching movie \".concat(movieId,\":\"),error);return null;}});const movies=await Promise.all(moviePromises);const validMovies=movies.filter(movie=>movie!==null);console.log(\"üîç [getFavoriteMovies] Final movies:\",validMovies);return validMovies;}catch(error){console.error('‚ùå Error fetching favorite movies:',error);return[];}};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_BASE_URL","getFavorites","userId","console","log","concat","res","get","data","updateFavorites","favorites","put","getFavoriteMovies","favoritesData","favoriteIds","length","moviePromises","map","movieId","error","movies","Promise","all","validMovies","filter","movie"],"sources":["/Users/tenmoutheshark/Desktop/mern-stack-project-backend-Tenmou-Vi/frontend/src/services/favorites.js"],"sourcesContent":["import axios from \"axios\";\nconst API_URL = (process.env.REACT_APP_API_BASE_URL || \"http://localhost:5001\") + \"/api/v1\";\n\nexport const getFavorites = async (userId) => {\n  console.log(\"üîç [getFavorites] Getting favorites for user:\", userId);\n  console.log(\"üîç [getFavorites] API URL:\", `${API_URL}/favorites/${userId}`);\n  const res = await axios.get(`${API_URL}/favorites/${userId}`);\n  console.log(\"üîç [getFavorites] Response:\", res.data);\n  return res.data;\n};\n\nexport const updateFavorites = async (userId, favorites) => {\n  const res = await axios.put(`${API_URL}/favorites`, {\n    userId: userId,\n    favorites,\n  });\n  return res.data;\n};\n\nexport const getFavoriteMovies = async (userId) => {\n  try {\n    console.log(\"üîç [getFavoriteMovies] Starting for user:\", userId);\n    \n    // First get the user's favorite movie IDs\n    const favoritesData = await getFavorites(userId);\n    const favoriteIds = favoritesData.favorites || [];\n    \n    console.log(\"üîç [getFavoriteMovies] Got favorite IDs:\", favoriteIds);\n    \n    if (favoriteIds.length === 0) {\n      console.log(\"üîç [getFavoriteMovies] No favorites found\");\n      return [];\n    }\n    \n    // Then get the full movie details for each favorite\n    const moviePromises = favoriteIds.map(async (movieId) => {\n      try {\n        console.log(\"üîç [getFavoriteMovies] Fetching movie:\", movieId);\n        const res = await axios.get(`${API_URL}/movies/id/${movieId}`);\n        console.log(\"üîç [getFavoriteMovies] Movie data:\", res.data);\n        return res.data;\n      } catch (error) {\n        console.error(`‚ùå Error fetching movie ${movieId}:`, error);\n        return null;\n      }\n    });\n    \n    const movies = await Promise.all(moviePromises);\n    const validMovies = movies.filter(movie => movie !== null);\n    console.log(\"üîç [getFavoriteMovies] Final movies:\", validMovies);\n    return validMovies;\n  } catch (error) {\n    console.error('‚ùå Error fetching favorite movies:', error);\n    return [];\n  }\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,KAAM,CAAAC,OAAO,CAAG,CAACC,OAAO,CAACC,GAAG,CAACC,sBAAsB,EAAI,uBAAuB,EAAI,SAAS,CAE3F,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAO,CAAAC,MAAM,EAAK,CAC5CC,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAEF,MAAM,CAAC,CACpEC,OAAO,CAACC,GAAG,CAAC,4BAA4B,IAAAC,MAAA,CAAKR,OAAO,gBAAAQ,MAAA,CAAcH,MAAM,CAAE,CAAC,CAC3E,KAAM,CAAAI,GAAG,CAAG,KAAM,CAAAV,KAAK,CAACW,GAAG,IAAAF,MAAA,CAAIR,OAAO,gBAAAQ,MAAA,CAAcH,MAAM,CAAE,CAAC,CAC7DC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAEE,GAAG,CAACE,IAAI,CAAC,CACpD,MAAO,CAAAF,GAAG,CAACE,IAAI,CACjB,CAAC,CAED,MAAO,MAAM,CAAAC,eAAe,CAAG,KAAAA,CAAOP,MAAM,CAAEQ,SAAS,GAAK,CAC1D,KAAM,CAAAJ,GAAG,CAAG,KAAM,CAAAV,KAAK,CAACe,GAAG,IAAAN,MAAA,CAAIR,OAAO,eAAc,CAClDK,MAAM,CAAEA,MAAM,CACdQ,SACF,CAAC,CAAC,CACF,MAAO,CAAAJ,GAAG,CAACE,IAAI,CACjB,CAAC,CAED,MAAO,MAAM,CAAAI,iBAAiB,CAAG,KAAO,CAAAV,MAAM,EAAK,CACjD,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAEF,MAAM,CAAC,CAEhE;AACA,KAAM,CAAAW,aAAa,CAAG,KAAM,CAAAZ,YAAY,CAACC,MAAM,CAAC,CAChD,KAAM,CAAAY,WAAW,CAAGD,aAAa,CAACH,SAAS,EAAI,EAAE,CAEjDP,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAEU,WAAW,CAAC,CAEpE,GAAIA,WAAW,CAACC,MAAM,GAAK,CAAC,CAAE,CAC5BZ,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC,CACxD,MAAO,EAAE,CACX,CAEA;AACA,KAAM,CAAAY,aAAa,CAAGF,WAAW,CAACG,GAAG,CAAC,KAAO,CAAAC,OAAO,EAAK,CACvD,GAAI,CACFf,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAEc,OAAO,CAAC,CAC9D,KAAM,CAAAZ,GAAG,CAAG,KAAM,CAAAV,KAAK,CAACW,GAAG,IAAAF,MAAA,CAAIR,OAAO,gBAAAQ,MAAA,CAAca,OAAO,CAAE,CAAC,CAC9Df,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAEE,GAAG,CAACE,IAAI,CAAC,CAC3D,MAAO,CAAAF,GAAG,CAACE,IAAI,CACjB,CAAE,MAAOW,KAAK,CAAE,CACdhB,OAAO,CAACgB,KAAK,gCAAAd,MAAA,CAA2Ba,OAAO,MAAKC,KAAK,CAAC,CAC1D,MAAO,KAAI,CACb,CACF,CAAC,CAAC,CAEF,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CAACN,aAAa,CAAC,CAC/C,KAAM,CAAAO,WAAW,CAAGH,MAAM,CAACI,MAAM,CAACC,KAAK,EAAIA,KAAK,GAAK,IAAI,CAAC,CAC1DtB,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAEmB,WAAW,CAAC,CAChE,MAAO,CAAAA,WAAW,CACpB,CAAE,MAAOJ,KAAK,CAAE,CACdhB,OAAO,CAACgB,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CACzD,MAAO,EAAE,CACX,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}