{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = (process.env.REACT_APP_API_BASE_URL || \"http://localhost:5001\") + \"/api/v1\";\nexport const getFavorites = async userId => {\n  const res = await axios.get(`${API_URL}/favorites/${userId}`);\n  return res.data;\n};\nexport const updateFavorites = async (userId, favorites) => {\n  const res = await axios.put(`${API_URL}/favorites`, {\n    _id: userId,\n    favorites\n  });\n  return res.data;\n};\nexport const getFavoriteMovies = async userId => {\n  try {\n    console.log('Getting favorite movies for user:', userId);\n    // First get the user's favorite movie IDs\n    const favoritesData = await getFavorites(userId);\n    console.log('Favorites data:', favoritesData);\n    const favoriteIds = favoritesData.favorites || [];\n    if (favoriteIds.length === 0) {\n      console.log('No favorite movies found');\n      return [];\n    }\n    console.log('Favorite movie IDs:', favoriteIds);\n\n    // Then get the full movie details for each favorite\n    const moviePromises = favoriteIds.map(async movieId => {\n      try {\n        console.log('Fetching movie details for:', movieId);\n        const res = await axios.get(`${API_URL}/movies/id/${movieId}`);\n        console.log('Movie details received for:', movieId, res.data.title);\n        return res.data;\n      } catch (error) {\n        console.error(`Error fetching movie ${movieId}:`, error);\n        return null;\n      }\n    });\n    const movies = await Promise.all(moviePromises);\n    const validMovies = movies.filter(movie => movie !== null);\n    console.log('Final movies array:', validMovies.map(m => m.title));\n    return validMovies;\n  } catch (error) {\n    console.error('Error fetching favorite movies:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_BASE_URL","getFavorites","userId","res","get","data","updateFavorites","favorites","put","_id","getFavoriteMovies","console","log","favoritesData","favoriteIds","length","moviePromises","map","movieId","title","error","movies","Promise","all","validMovies","filter","movie","m"],"sources":["/Users/tenmoutheshark/Desktop/mern-stack-project-backend-Tenmou-Vi/frontend/src/services/favorites.js"],"sourcesContent":["import axios from \"axios\";\nconst API_URL = (process.env.REACT_APP_API_BASE_URL || \"http://localhost:5001\") + \"/api/v1\";\n\nexport const getFavorites = async (userId) => {\n  const res = await axios.get(`${API_URL}/favorites/${userId}`);\n  return res.data;\n};\n\nexport const updateFavorites = async (userId, favorites) => {\n  const res = await axios.put(`${API_URL}/favorites`, {\n    _id: userId,\n    favorites,\n  });\n  return res.data;\n};\n\nexport const getFavoriteMovies = async (userId) => {\n  try {\n    console.log('Getting favorite movies for user:', userId);\n    // First get the user's favorite movie IDs\n    const favoritesData = await getFavorites(userId);\n    console.log('Favorites data:', favoritesData);\n    const favoriteIds = favoritesData.favorites || [];\n\n    if (favoriteIds.length === 0) {\n      console.log('No favorite movies found');\n      return [];\n    }\n\n    console.log('Favorite movie IDs:', favoriteIds);\n\n    // Then get the full movie details for each favorite\n    const moviePromises = favoriteIds.map(async (movieId) => {\n      try {\n        console.log('Fetching movie details for:', movieId);\n        const res = await axios.get(`${API_URL}/movies/id/${movieId}`);\n        console.log('Movie details received for:', movieId, res.data.title);\n        return res.data;\n      } catch (error) {\n        console.error(`Error fetching movie ${movieId}:`, error);\n        return null;\n      }\n    });\n\n    const movies = await Promise.all(moviePromises);\n    const validMovies = movies.filter(movie => movie !== null);\n    console.log('Final movies array:', validMovies.map(m => m.title));\n    return validMovies;\n  } catch (error) {\n    console.error('Error fetching favorite movies:', error);\n    return [];\n  }\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,OAAO,GAAG,CAACC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,uBAAuB,IAAI,SAAS;AAE3F,OAAO,MAAMC,YAAY,GAAG,MAAOC,MAAM,IAAK;EAC5C,MAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,GAAGP,OAAO,cAAcK,MAAM,EAAE,CAAC;EAC7D,OAAOC,GAAG,CAACE,IAAI;AACjB,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAOJ,MAAM,EAAEK,SAAS,KAAK;EAC1D,MAAMJ,GAAG,GAAG,MAAMP,KAAK,CAACY,GAAG,CAAC,GAAGX,OAAO,YAAY,EAAE;IAClDY,GAAG,EAAEP,MAAM;IACXK;EACF,CAAC,CAAC;EACF,OAAOJ,GAAG,CAACE,IAAI;AACjB,CAAC;AAED,OAAO,MAAMK,iBAAiB,GAAG,MAAOR,MAAM,IAAK;EACjD,IAAI;IACFS,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEV,MAAM,CAAC;IACxD;IACA,MAAMW,aAAa,GAAG,MAAMZ,YAAY,CAACC,MAAM,CAAC;IAChDS,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEC,aAAa,CAAC;IAC7C,MAAMC,WAAW,GAAGD,aAAa,CAACN,SAAS,IAAI,EAAE;IAEjD,IAAIO,WAAW,CAACC,MAAM,KAAK,CAAC,EAAE;MAC5BJ,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC,OAAO,EAAE;IACX;IAEAD,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEE,WAAW,CAAC;;IAE/C;IACA,MAAME,aAAa,GAAGF,WAAW,CAACG,GAAG,CAAC,MAAOC,OAAO,IAAK;MACvD,IAAI;QACFP,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEM,OAAO,CAAC;QACnD,MAAMf,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,GAAGP,OAAO,cAAcqB,OAAO,EAAE,CAAC;QAC9DP,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEM,OAAO,EAAEf,GAAG,CAACE,IAAI,CAACc,KAAK,CAAC;QACnE,OAAOhB,GAAG,CAACE,IAAI;MACjB,CAAC,CAAC,OAAOe,KAAK,EAAE;QACdT,OAAO,CAACS,KAAK,CAAC,wBAAwBF,OAAO,GAAG,EAAEE,KAAK,CAAC;QACxD,OAAO,IAAI;MACb;IACF,CAAC,CAAC;IAEF,MAAMC,MAAM,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACP,aAAa,CAAC;IAC/C,MAAMQ,WAAW,GAAGH,MAAM,CAACI,MAAM,CAACC,KAAK,IAAIA,KAAK,KAAK,IAAI,CAAC;IAC1Df,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEY,WAAW,CAACP,GAAG,CAACU,CAAC,IAAIA,CAAC,CAACR,KAAK,CAAC,CAAC;IACjE,OAAOK,WAAW;EACpB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}